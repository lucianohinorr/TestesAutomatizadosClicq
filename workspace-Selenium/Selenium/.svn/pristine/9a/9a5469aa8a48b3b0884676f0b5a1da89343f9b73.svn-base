package TST_026_Cadastrar_Usuario_Regular;

import java.util.concurrent.TimeUnit;

import org.junit.*;

import static org.junit.Assert.*;

import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

import br.com.specto.controladorPrincipal.ControladorPrincipal;
import junit.framework.TestResult;

public class CadastrarUsuarioRegular {
  
	private WebDriver driver;
	private String baseUrl;
	private boolean acceptNextAlert = true;
	private StringBuffer verificationErrors = new StringBuffer();
	
	private final String NOME_USUARIO_REGULAR = "Luciano_teste";
	private final String LOGIN_USUARIO_REGULAR  = "luciano_teste";
	private final String SENHA_USUARIO_REGULAR = "111111";
	private final String CONFIRMAR_SENHA_USUARIO_REGULAR  = "111111";
	private final String RAMAL_USUARIO_REGULAR  = "5698";
	private final String RG_USUARIO_REGULAR  = "56456478";
	private final String EMAIL_USUARIO_REGULAR  = "Luciano_teste@specto.com.br";
	private final String MATRICULA_USUARIO_REGULAR  = "65894";
	
	
	
	TestResult resultado = new TestResult();
	
	

	@Before
	public void setUp() throws Exception {
		
		driver = new FirefoxDriver();
		
		System.out.println("Metodo que executa antes da classe");
		
		baseUrl = "http://10.10.1.3:8081/VisActAccessServer/";
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		
		System.out.println("Metodo que executa antes da classe");
				
    
	}

	@Test
	public void cadastrarUsuarioRegularVisact() throws Exception {
		
		System.out.println("Iniciando o teste para o cadastro de Usuário Regular");
		
		driver.get(baseUrl);
    
		try{
			
			System.out.println("Executando Login Manual");
    
			//Login Manual
			driver.findElement(By.name("j_username")).sendKeys("admin");
			driver.findElement(By.name("j_password")).sendKeys("111111");
			driver.findElement(By.name("submit")).click();
    
			//Login Automático
			//driver.findElement(By.id("VA_server")).click();
			
			System.out.println("Login Manual Executado");

			//seleciona opção Cadastro no menu
			driver.findElement(By.id("mainMenu_ami0-header")).click();
			
			//esse tempo foi inserido pois tinha momentos que a opção aberta era grade de horário
			Long end2 = System.currentTimeMillis() + 2000;
			while (System.currentTimeMillis() < end2) {}
			
			//seleciona opção Usuários do menu
			driver.findElement(By.id("menuUser_tmi0-img")).click();
			
		
			//seleciona a opção Usuário Regular
			driver.findElement(By.linkText("Usuário Regular")).click();
			
			//abre a tela para cadastro de Usuário Regular
			driver.findElement(By.xpath("//*[ contains(@title, 'Incluir')]")).click();
		
			System.out.println("Abrindo Tela para cadastro de Usuário Regular");
			
			
			//Inserindo os dados para o cadastro de região
			driver.findElement(By.xpath("//*[ contains(@name, 'name')]")).sendKeys(NOME_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'login')]")).sendKeys(LOGIN_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'passwd')]")).sendKeys(SENHA_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'confirmPasswd')]")).sendKeys(CONFIRMAR_SENHA_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'extensionLine')]")).sendKeys(RAMAL_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'rg')]")).sendKeys(RG_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'email')]")).sendKeys(EMAIL_USUARIO_REGULAR);
			driver.findElement(By.xpath("//*[ contains(@name, 'registration')]")).sendKeys(MATRICULA_USUARIO_REGULAR);
			
					
			//direcionando para a aba Hierarquia de acesso			
			driver.findElement(By.linkText("Hierarquia de Acesso")).click();
			
			/*
			 * Seleciona a opção Mesanino no grupo de ambientes Diversão da Localidade Casa-Luciano
			 * Obs: ao selecionar um ambiente, que necessite utilizar o scroll, a interface fica deslocada de tal maneira que a aba superior, onde ficam os botões fechar nao são exibidos.
			 * Desta forma estou selecionando um ambiente que fique a visivel de cara ao chamar a aba Hierarquia de Acesso
			 */
			driver.findElement(By.xpath("/html/body/div[3]/div[6]/div[3]/div[3]/table/tbody/tr/td/div/form/div[8]/table/tbody/tr/td[3]/table/tbody/tr[2]/td/div/fieldset/table/tbody/tr/td/div/div/table/tbody/tr/td/span/span/span/span/span/span/span/span/span[2]/table/tbody/tr/td[2]/div/input")).click();
			
				
						
			//TESTES PARA PEGAR O Ambiente sem XPATH
			//driver.findElement(By.xpath("//*span")).getAttribute("[Comercial]"); não funciona
			//driver.findElement(By.xpath("//*[ contains(@value, 'E@45')]")).click();
			//driver.findElement(By.xpath(//input[@value = "E@45"])   .click();
			
			
			
			Long end1 = System.currentTimeMillis() + 1000;
			while (System.currentTimeMillis() < end1) {}
		    
			//Botão Salvar do cadastro de região
			driver.findElement(By.xpath("//*[ contains(@title, 'Salvar')]")).click();
							
			System.out.println("Cadastro de Usuário Regular Salvo");    
		    
			
			//capturando a mensagem de validação após salvar a região
			String msgValidacaoCadUsuarioReg = driver.findElement(By.xpath("/html/body/div[3]/div[6]/div[3]/div[2]/div/table/tbody/tr/td[2]")).getText();
	
				
			try{
				
				System.out.println("Validando Mensagem!");
				
				//validando a mensagem de validação
				assertEquals("Usuário [Luciano_teste] salvo com sucesso!", msgValidacaoCadUsuarioReg);
				
				//mensagem para teste de acerto
				//assertEquals("Já existe um usuário com o login [luciano_teste]! Nenhum usuário foi salvo.", msgValidacaoCadUsuarioReg);
								
				System.out.println("Mensagem Validada!");
				
				run("visact", "TST-026.01 - Cadastrar Usuario Regular", "Pass", "Luciano.silva", "Mensagem foi validade - Testes gerado de forma automática");
				
				
			}
			catch (AssertionError e){
				
				System.out.println("Mensagem Não foi Validada!");
				
				//fail("testando");
								
				/*
				 * 
				 * run(String banco, String testCase, String operation, String runBy, String results)
				 * Uso: Pass, Pass - Improvemen, Not Runt, Fail, Deferred"
				 * No runBy teria que criar um usuário do tipo "Usuário Automatizado"
				 */

				run("visact", "TST-026.01 - Cadastrar Usuario Regular ", "Fail", "GRUPOSPECTO\\luciano.silva", "Mensagem não foi validade - Testes gerado de forma automática");
				
				throw e; 
			}			
			
					
		
    
			//espera de 5 segundo, assim dá tempo de debugar a mensagem
			//acho que não faz sentido este trecho aqui, analisar com calma
			Long end = System.currentTimeMillis() + 5000;
			
			
			//fechar a tela de cadastro da região
			driver.findElement(By.xpath("//*[contains(@title, 'Fechar')]")).click();
			
			System.out.println("Tela de cadastro de Usuário Regular Fechada!");
    
    
			//espera de 5 segundo, assim dá tempo de debugar a mensagem
			end = System.currentTimeMillis() + 3000;
			while (System.currentTimeMillis() < end) {}    
    
			//fechando a janela da lista de regiões pelo imagem. 
			driver.findElement(By.xpath("//*[ contains(@src, '/VisActAccessServer/themes/athena/img/close.gif')]")).click();
			
			System.out.println("Tela com a lista dos Usuários Regulares Fechada!");
			
			
			
			System.out.println("Fechando a Aplicação");
			
			
			Long end3 = System.currentTimeMillis() + 2000;
			while (System.currentTimeMillis() < end3) {}  
     
			//se não me engano botão sair da aplicação
			driver.findElement(By.cssSelector("input[type=\"button\"]")).click();
			
			System.out.println("Aplicação Fechada!");
    
    
		}
		catch(Exception erro){
			
			System.out.println("Erro no caso de Teste 'Cadastrar Hierarquia' : " + erro);
			
		}
		finally{
			
		}
		
    
	}
	
	
	//metodo que finaliza o teste, fechando a instancia do WebDriver
	@After
	public void tearDownTest() throws Exception {
		
		driver.quit();
		String verificationErrorString = verificationErrors.toString();
		
		System.out.println("After!");
		
		
		/*
		 * verificando se esta classe gerou algum erro com base no método assertEquals
		 * Trecho abaixo relacionado a tentativa de capturar o erro gerado, porém não funcionou
		 * Usando atualmente para capturar o erro do método assertEquals o try, catch
		 */
	
		/*if(resultado.wasSuccessful()){
			
			System.out.println("Não deu erro WasSucessful!");
		}
		else{
			System.out.println("Deu erro WasSucessful!");
		}
		
		
		System.out.println("Depois WasSucessful!"); */
		
	
		
		if (!"".equals(verificationErrorString)) {
			fail(verificationErrorString);
			
			System.out.println("Não deu erro!");
		}
		else{
			
			System.out.println("Deu erro");
		}
		
	}
	
	
	public void run(String banco, String testCase, String operation, String runBy, String results){
			
		(new ControladorPrincipal()).run(banco, testCase, operation, runBy, results);

	}
	
	

	private boolean isElementPresent(By by) {
		try {
			driver.findElement(by);
			return true;
		} catch (NoSuchElementException e) {
			return false;
		}
	}

	private boolean isAlertPresent() {
		try {
			driver.switchTo().alert();
			return true;
		} catch (NoAlertPresentException e) {
      return false;
		}
	}

	private String closeAlertAndGetItsText() {
		try {
			Alert alert = driver.switchTo().alert();
			String alertText = alert.getText();
			if (acceptNextAlert) {
				alert.accept();
			} else {
				alert.dismiss();
			}
			return alertText;
		} 
		finally {
			acceptNextAlert = true;
		}
	}
}
