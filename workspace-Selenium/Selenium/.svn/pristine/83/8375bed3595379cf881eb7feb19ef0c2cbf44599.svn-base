package TST_083_Configurar_Expurgo_De_Eventos;



import org.junit.*;

import static org.junit.Assert.*;

import org.openqa.selenium.*;

import br.com.specto.arquivo.debug.LogDebug;
import br.com.specto.arquivo.test.result.LogTestResult;
import br.com.specto.auxiliar.MetodosAuxiliares;
import br.com.specto.entidades.ExpurgoEventos;
import br.com.specto.entidades.Localidade;


public class TST_083_51_ApagarExpurgoDeEventos {
  
	private WebDriver driver;
	private StringBuffer verificationErrors = new StringBuffer();
	private ExpurgoEventos expurgoEventos;
	private Localidade localidade;
	private MetodosAuxiliares login;
	private LogDebug loggerDebug;
	private LogTestResult loggerTestResult;
	
	
	@Before
	public void setUp() throws Exception {
		
		this.expurgoEventos = new ExpurgoEventos();
		this.localidade = new Localidade();
		this.login = new MetodosAuxiliares();
		this.loggerDebug = new LogDebug(this.getClass());
		this.loggerTestResult = new LogTestResult(this.getClass());
	
	}

	
	@Test
	public void habilitarExpurgoDeAuditoriaVisact() throws Exception {
		
		loggerDebug.debug("Teste Iniciado");
		    
		try{
			
			driver = login.executaLoginManual();
        
			driver.findElement(By.id("mainMenu_ami1-header")).click();			
			driver.findElement(By.id("menuConfigSystem_tmi0-title")).click();
			driver.findElement(By.id("menuDataPurge_tmi0-title")).click();
			driver.findElement(By.linkText("Eventos e Visitantes")).click();
			
			//Recuperar o id no banco referente a Localidade
			//Preciso deste id (localidade) para saber qual o id do registro do expurgo no banco
			String s_idLocalidade = "" + localidade.encontraIdLocalidade(expurgoEventos.getLocalidade());
		
			//Obtendo o id do registro do expurgo a ser deletado
			String s_idExpurgoDeEventos = "" + expurgoEventos.encontraIdExpurgoEventos(s_idLocalidade);
			
			driver.findElement(By.id(s_idExpurgoDeEventos)).click();
    		
    		//Excluir Expurgo de Eventos
			driver.findElement(By.xpath("//*[ contains(@src, '/VisActAccessServer/themes/athena/img/delete.gif')]")).click();
			
    		//Tratando o Alerta
			Alert alert = driver.switchTo().alert();//Obtem o alerta aberto.
    		alert.getText();//Obtem o texto do alerta. 
    		alert.accept();//Equivalente ao click em OK no alerta.
    
			//capturando a mensagem de validação após salvar o Grupo
			String msgRetornadaInterface = driver.findElement(By.xpath("/html/body/div[3]/div[6]/div[2]/div[2]/div/table/tbody/tr/td[2]")).getText();
			String msgEsperada = "Configuração de Expurgo removida com sucesso!";
		
			try{				
				
				//validando a mensagem
				assertEquals(msgEsperada, msgRetornadaInterface);	    
				loggerTestResult.testResult("Aprovado");
				
			}catch (AssertionError erroValidaMensagemConfigExpurgoEventos){
    		
				loggerDebug.debug("Erro ao Executar o caso de Teste: " + erroValidaMensagemConfigExpurgoEventos);
    			loggerTestResult.testResult("Reprovado");
    			
    			//Avisa a api junit sobre o erro no caso de teste
    			throw erroValidaMensagemConfigExpurgoEventos;
    	
    		}finally{
    			
    			driver.manage().window().maximize();
    
    			//fechar a tela de cadastro do Grupo
				driver.findElement(By.xpath("//*[contains(@title, 'Fechar')]")).click();
						
				//Selecionando o botão Sair da Aplicação.
				driver.findElement(By.cssSelector("input[type=\"button\"]")).click();
				
				loggerDebug.debug("Teste Finalizado");
			
			}
			
		}catch(Exception erro){
			
			loggerDebug.debug("Erro ao Executar o caso de Teste: " + erro);
			loggerTestResult.testResult("Reprovado");
			loggerDebug.debug("Teste Finalizado");	
			
			//Avisa a api junit sobre o erro no caso de teste
			throw erro;
			
		}
	}
	

	@After
	public void tearDown() throws Exception {
		
		driver.quit();
		String verificationErrorString = verificationErrors.toString();
		
		if (!"".equals(verificationErrorString)) {
			
			fail(verificationErrorString);
		}
	}
	
}
