package TST_024_Cadastrar_Veiculo;


import org.junit.*;
import static org.junit.Assert.*;
import org.openqa.selenium.*;
import br.com.specto.arquivo.debug.LogDebug;
import br.com.specto.arquivo.test.result.LogTestResult;
import br.com.specto.auxiliar.MetodosAuxiliares;
import br.com.specto.entidades.Veiculo;


public class TST_024_08_EditarVeiculo_Modelo_E_AnoDeFabricação {


	private WebDriver driver;
	private StringBuffer verificationErrors = new StringBuffer();
	private Veiculo veiculo;
	private MetodosAuxiliares login;
	private LogDebug loggerDebug;
	private LogTestResult loggerTestResult;


	@Before
	public void setUp() throws Exception {

		this.veiculo = new Veiculo();
		this.login = new MetodosAuxiliares();
		this.loggerDebug = new LogDebug(this.getClass());
		this.loggerTestResult = new LogTestResult(this.getClass());

	}


	@Test
	public void EditarVeiculoVisact() throws Exception {

		loggerDebug.debug("Teste Iniciado");
		
		try{

			driver = login.executaLoginManual();

			//seleciona opção Cadastro no menu
			driver.findElement(By.id("mainMenu_ami0-header")).click();

			//seleciona opção Veiculos do menu
			driver.findElement(By.id("menuVehicles_tmi0-title")).click();

			//seleciona a opção Veículo
			driver.findElement(By.linkText("Veículo")).click();

			//Recuperar o id do banco referente a Placa do Veículo cadastrada atualmente no banco
			String s_idVeiculo = "" + veiculo.encontraIdVeiculo(veiculo.getPlaca());
	
			//Marca o Veículo para edição.
			driver.findElement(By.id(s_idVeiculo)).click();

			//abre a tela para Editar Veículo
			driver.findElement(By.xpath("//*[ contains(@title, 'Editar')]")).click();

			//Inserindo edita o campo da placa
			driver.findElement(By.xpath("//*[ contains(@name, 'model')]")).clear();
			driver.findElement(By.xpath("//*[ contains(@name, 'model')]")).sendKeys(veiculo.getModeloParaEdicao());

			driver.findElement(By.xpath("//*[ contains(@name, 'year')]")).clear();
			driver.findElement(By.xpath("//*[ contains(@name, 'year')]")).sendKeys(veiculo.getAno_FabricacaoParaEdicao());

			//Botão Salvar do cadastro de Veículo
			driver.findElement(By.xpath("//*[ contains(@title, 'Salvar')]")).click();

			//capturando a mensagem de validação após salvar o Grupo
			String msgRetornadaInterface = driver.findElement(By.xpath("/html/body/div[3]/div[6]/div[3]/div[2]/div/table/tbody/tr/td[2]")).getText();
			String msgEsperada = "Veículo [" + veiculo.getPlaca() + "] editado com sucesso!";

			try{

				//validando a mensagem de validação
				assertEquals(msgEsperada, msgRetornadaInterface);	    
				loggerTestResult.testResult("Aprovado");

			}catch (AssertionError erroValidaMensagemCadastroGrupoDeHierarquia){

				loggerDebug.debug("Erro ao Executar o caso de Teste: " + erroValidaMensagemCadastroGrupoDeHierarquia);
    			loggerTestResult.testResult("Reprovado");
    		
    			//Avisa a api junit sobre o erro no caso de teste
    			throw erroValidaMensagemCadastroGrupoDeHierarquia;	
    			
			} finally{

				//fechar a tela de cadastro de Veículos
				driver.findElement(By.xpath("//*[contains(@title, 'Fechar')]")).click();

				//fechando a janela da lista de Veículos. 
				driver.findElement(By.xpath("//*[contains(@title, 'Fechar')]")).click();

				//Selecionando o botão Sair da Aplicação.
				driver.findElement(By.cssSelector("input[type=\"button\"]")).click();
				
				loggerDebug.debug("Teste Finalizado");

			}

		} catch(Exception erro){

			loggerDebug.debug("Erro ao Executar o caso de Teste: " + erro);
			loggerTestResult.testResult("Reprovado");
			loggerDebug.debug("Teste Finalizado");
			
			//Avisa a api junit sobre o erro no caso de teste
			throw erro;
		}
	}


	@After
	public void tearDownTest() throws Exception {

		driver.quit();
		String verificationErrorString = verificationErrors.toString();

		if (!"".equals(verificationErrorString)) {

			fail(verificationErrorString);
		}

	}

}
